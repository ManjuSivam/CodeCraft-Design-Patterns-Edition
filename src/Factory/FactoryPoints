Key Points for Abstract Factory Design Pattern
1. One interface for factory Methods
2. concrete classes implement the factory interface
3. One concrete class for Non-factory Methods
4. Concrete class will have a method to get object of the
   concrete class that implements factory methods based on user inputs.

Implementation:
1. Abstract Factory Interface:
    Define an interface with methods to create abstract products.
    Here - UiFactory
2. Concrete Factory Classes:
    Implement the abstract factory interface in concrete factory classes for each platform or
    product family.
    Here - IOSFactory, AndroidFactory
3. Abstract Product Interfaces:
    Define interfaces for each type of product the factory creates (e.g., Button, Menu).
4. Concrete Product Classes:
    Implement the product interfaces in concrete classes for each platform or product variant.
    Here - IosBtn, AndroidBtn, IosMenu, AndroidMenu
5. Client Code:
    Use the abstract factory to create products without specifying their concrete classes.
6. Factory Method in Client:
    Include a method in the client to get the appropriate factory based on some criteria
    (e.g., flutter.getFactory(SupportedPlatforms.IOS)).
7. Interaction with Products:
    Use the created product objects in the client code to perform operations
    (e.g., btn.click(), menu.showMenu()).